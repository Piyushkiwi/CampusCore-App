package com.campus.backend.dtos;

import com.campus.backend.entity.enums.Role;
import jakarta.validation.constraints.*; // Import validation annotations
import lombok.Data;

import java.time.LocalDate;
import java.time.Period;
import java.util.List;

@Data
public class StudentDto {
    private Long id;

    @NotBlank(message = "Username is required")
    @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
    private String username;

    @NotBlank(message = "Email is required")
    @Email(message = "Email should be valid")
    private String email;

    @NotBlank(message = "Password is required for new students")
    @Size(min = 6, message = "Password must be at least 6 characters long")
    private String password; // Consider making this @JsonInclude(JsonInclude.Include.NON_NULL) for GET requests

    @NotBlank(message = "First name is required")
    @Size(max = 100, message = "First name cannot exceed 100 characters")
    private String firstName;

    @NotBlank(message = "Last name is required")
    @Size(max = 100, message = "Last name cannot exceed 100 characters")
    private String lastName;

    @NotNull(message = "Date of Birth is required")
    @Past(message = "Date of Birth must be in the past")
    private LocalDate dateOfBirth;

    @NotBlank(message = "Gender is required")
    private String gender; // Consider using an Enum for consistency (MALE, FEMALE, OTHER)

    @Pattern(regexp = "^[+]?[0-9]{10,13}$", message = "Phone number must be 10 to 13 digits")
    private String phoneNumber; // Main student mobile number

    // Address Details
    @NotBlank(message = "Address Line 1 is required")
    @Size(max = 255, message = "Address line 1 cannot exceed 255 characters")
    private String addressLine1;

    @NotBlank(message = "City is required")
    @Size(max = 100, message = "City cannot exceed 100 characters")
    private String city;

    @NotBlank(message = "State is required")
    @Size(max = 100, message = "State cannot exceed 100 characters")
    private String state;

    @NotBlank(message = "Pincode is required")
    @Pattern(regexp = "^[0-9]{6}$", message = "Pincode must be 6 digits")
    private String pincode;

    @NotBlank(message = "Country is required")
    @Size(max = 100, message = "Country cannot exceed 100 characters")
    private String country;

    private String profileImageUrl; // No direct validation here, handled by image upload logic

    @NotNull(message = "Enrollment Date is required")
    @PastOrPresent(message = "Enrollment Date cannot be in the future")
    private LocalDate enrollmentDate;

    @NotBlank(message = "Grade is required")
    @Size(max = 50, message = "Grade cannot exceed 50 characters")
    private String grade;

    private Role role = Role.ROLE_STUDENT; // Default role

    @NotNull(message = "Class ID is required")
    private Long classId; // Single class ID

    // Parent Details
    @NotBlank(message = "Father's Name is required")
    @Size(max = 200, message = "Father's name cannot exceed 200 characters")
    private String fatherName;

    @NotBlank(message = "Mother's Name is required")
    @Size(max = 200, message = "Mother's name cannot exceed 200 characters")
    private String motherName;

    @Pattern(regexp = "^[+]?[0-9]{10,13}$", message = "Father's mobile number must be 10 to 13 digits")
    private String fatherMobileNumber;

    @Pattern(regexp = "^[+]?[0-9]{10,13}$", message = "Mother's mobile number must be 10 to 13 digits")
    private String motherMobileNumber;

    @Pattern(regexp = "^[+]?[0-9]{10,13}$", message = "Local mobile number must be 10 to 13 digits")
    private String localMobileNumber;

    // More Student Details
    @Size(max = 255, message = "Student Hindi name cannot exceed 255 characters")
    private String studentHindiName;

    @NotBlank(message = "Religion is required")
    @Size(max = 50, message = "Religion cannot exceed 50 characters")
    private String religion;

    @NotBlank(message = "Nationality is required")
    @Size(max = 100, message = "Nationality cannot exceed 100 characters")
    private String nationality;

    @NotBlank(message = "Category is required")
    @Size(max = 50, message = "Category cannot exceed 50 characters")
    private String category; // e.g., General, OBC, SC, ST

    @NotNull(message = "Physical handicapped status is required")
    private Boolean physicalHandicapped; // Yes or No

    // Roll number - will be generated by entity, but can be displayed
    private String rollNumber;

    @NotEmpty(message = "At least one subject ID is required")
    private List<@NotNull Long> subjectIds; // Using @NotNull for elements in the list

    // Derived field: Age
    public Integer getAge() {
        if (this.dateOfBirth != null) {
            return Period.between(this.dateOfBirth, LocalDate.now()).getYears();
        }
        return null;
    }

    // For updates, password might not be provided, so we need a separate validation group
    // or handle it conditionally. For simplicity, @NotBlank for password is okay if it's always required.
    // If you want password to be optional on update, you'd need validation groups or manual checks.
}